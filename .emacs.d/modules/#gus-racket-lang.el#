;; Shameless ripoff of doom emacs
(unless (executable-find "drracket")
  (warn! "Could not find drracket executable; code-completion and syntax checking will not work."))
(unless (executable-find "racket")
  (warn! "Could not find racket executable; REPL will not work."))
(unless (executable-find "raco")
  (warn! "Could not find raco executable; commands for install packages and build libraries will not work."))
(straight-use-package 'racket-mode)

(straight-use-package 'highlight-quoted)
(straight-use-package 'parinfer)
(with-eval-after-load "racket-mode"
  (defun gus-racket-mode-hook ()
    (rainbow-delimiters-mode)
    (highlight-quoted-mode)
    (setq evil-shift-width 2)
    (parinfer-mode))
  (add-hook 'racket-mode-hook
	    #'gus-racket-mode-hook)
  (evil-define-key 'insert racket-mode-map "[" #'racket-smart-open-bracket)
  (defvar gus-racket-comma-map (make-sparse-keymap)
    "Keymap for global keybindings. Intended to be prefixed by space")
  (evil-define-key 'normal racket-mode-map "," gus-racket-comma-map)
  (define-key gus-racket-comma-map "r" #'racket-run)
  (define-key gus-racket-comma-map "R" #'racket-run-and-switch-to-repl)
  (define-key gus-racket-comma-map "a" #'racket-align)
  (define-key gus-racket-comma-map "A" #'racket-unalign)
  (define-key gus-racket-comma-map "A" #'racket-unalign)
  (evil-define-key 'insert racket-mode-map (kbd "C-y") #'racket-insert-lambda)
  (define-key gus-racket-comma-map "h" #'racket-doc)
  (define-key gus-racket-comma-map "p" #'racket-cycle-paren-shapes)
  (define-key gus-racket-comma-map "u" #'racket-backward-up-list)
  (define-key gus-racket-comma-map "t" #'parinfer-toggle-mode))
  
(provide 'gus-racket-lang)
